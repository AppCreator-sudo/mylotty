import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from uuid import uuid4
from typing import Dict, Optional
from cryptopay import CryptoPay
import random
from db import AsyncDatabase, User
import os
from dotenv import load_dotenv
import datetime
from aiogram.exceptions import TelegramBadRequest

load_dotenv()
db = AsyncDatabase(os.getenv("DATABASE_URL"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv('API_TOKEN')
CRYPTOPAY_TOKEN = os.getenv('CRYPTOPAY_TOKEN')

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CryptoPay
cryptopay = CryptoPay(token=CRYPTOPAY_TOKEN)

ADMIN_ID = int(os.getenv('ADMIN_ID'))  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram user_id

# –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤
translations = {
    "start": {
        "ru": "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} TON\n\nLOTTY TON ‚Äî —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è —Å —á–µ—Å—Ç–Ω—ã–º–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏ –∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ —à–∞–Ω—Å–∞–º–∏ –Ω–∞ –∫—Ä—É–ø–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à!\n\n‚Ä¢ –ì–ª–∞–≤–Ω—ã–π –¥–∂–µ–∫–ø–æ—Ç ‚Äî –¥–æ 25 000 TON\n‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ <a href=\"https://t.me/CryptoBot\">CryptoBot</a> ‚Äî –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å Telegram\n‚Ä¢ –ö—ç—à–±—ç–∫, –±–æ–Ω—É—Å—ã –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–¥–∞—á—É ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –∏–º–µ–Ω–Ω–æ –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º!",
        "en": "üéâ Welcome, {username}!\nYour balance: {balance:.2f} TON\n\nLOTTY TON is a modern lottery with fair draws and real chances to win big!\n\n‚Ä¢ Main jackpot ‚Äî up to 25,000 TON\n‚Ä¢ Instant payouts via <a href=\"https://t.me/CryptoBot\">CryptoBot</a> ‚Äî the official payment service of Telegram\n‚Ä¢ Cashback, bonuses, and referral program\n\nTry your luck ‚Äî maybe you'll be the next winner!"
    },
    "choose_language": {
        "ru": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "en": "Select language:"
    },
    "button_ru": {
        "ru": "–†—É—Å—Å–∫–∏–π",
        "en": "Russian"
    },
    "button_en": {
        "ru": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
        "en": "English"
    },
    "play": {
        "ru": "üé´ LOTTY TON",
        "en": "üé´ LOTTY TON"
    },
    "balance": {
        "ru": "üí∞ –ë–∞–ª–∞–Ω—Å",
        "en": "üí∞ Balance"
    },
    "deposit": {
        "ru": "üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å",
        "en": "üì• Deposit"
    },
    "withdraw": {
        "ru": "üì§ –í—ã–≤–æ–¥",
        "en": "üì§ Withdraw"
    },
    "promo_btn": {
        "ru": "üéÅ –ê–∫—Ü–∏–∏",
        "en": "üéÅ Promotions"
    },
    "rules_btn": {
        "ru": "üìú –ü—Ä–∞–≤–∏–ª–∞",
        "en": "üìú Rules"
    },
    "referral": {
        "ru": "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã",
        "en": "üë• Referrals"
    },
    "back": {
        "ru": "‚Äπ –ù–∞–∑–∞–¥",
        "en": "‚Äπ Back"
    },
    "main_menu": {
        "ru": "üè† –í –º–µ–Ω—é",
        "en": "üè† Main menu"
    },
    "change_lang": {
        "ru": "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        "en": "üåê Change language"
    },
    "add10": {
        "ru": "üí∏ –ù–∞—á–∏—Å–ª–∏—Ç—å 10 TON",
        "en": "üí∏ Add 10 TON"
    },
    "agree_lottery": {
        "ru": "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ª–æ—Ç–µ—Ä–µ–∏.\n\nLOTTY TON ‚Äî —ç—Ç–æ —á–µ—Å—Ç–Ω–∞—è –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è, –≥–¥–µ –∫–∞–∂–¥—ã–π –±–∏–ª–µ—Ç –¥–∞—ë—Ç —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã, –≤–∫–ª—é—á–∞—è –≥–ª–∞–≤–Ω—ã–π –¥–∂–µ–∫–ø–æ—Ç –¥–æ 25 000 TON!\n\n–ü–æ–∫—É–ø–∞—è –±–∏–ª–µ—Ç, –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ, –≥–¥–µ –≤—Å—ë —Ä–µ—à–∞–µ—Ç —É–¥–∞—á–∞. –ß–µ–º –±–æ–ª—å—à–µ –±–∏–ª–µ—Ç–æ–≤ ‚Äî —Ç–µ–º –≤—ã—à–µ –≤–∞—à–∏ —à–∞–Ω—Å—ã!\n\n–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏! –ü—É—Å—Ç—å –∏–º–µ–Ω–Ω–æ –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ –æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–º –¥–∂–µ–∫–ø–æ—Ç–∞!",
        "en": "Before you start playing, please confirm your agreement with the lottery rules.\n\nLOTTY TON is a fair and transparent lottery where every ticket gives you a chance to win prizes, including the main jackpot of up to 25,000 TON!\n\nBy purchasing a ticket, you enter the draw where everything depends on luck. The more tickets you buy, the higher your chances!\n\nGood luck! Maybe you will be the next jackpot winner!"
    },
    "agree_button": {
        "ru": "‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)",
        "en": "‚úÖ I agree"
    },
    "choose_tickets": {
        "ru": "üéüÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤:",
        "en": "üéüÔ∏è Choose the number of tickets:"
    },
    "ticket_1": {
        "ru": "1 –±–∏–ª–µ—Ç ‚Äî 1 TON",
        "en": "1 ticket ‚Äî 1 TON"
    },
    "ticket_3": {
        "ru": "3 –±–∏–ª–µ—Ç–∞ ‚Äî 2.9 TON",
        "en": "3 tickets ‚Äî 2.9 TON"
    },
    "ticket_10": {
        "ru": "10 –±–∏–ª–µ—Ç–æ–≤ ‚Äî 9 TON",
        "en": "10 tickets ‚Äî 9 TON"
    },
    "not_enough_funds": {
        "ru": "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {tickets} –±–∏–ª–µ—Ç–æ–≤.\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} TON",
        "en": "‚ùå Not enough funds to buy {tickets} tickets.\nYour balance: {balance:.2f} TON"
    },
    "win_result": {
        "ru": "üéâ –í—ã –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ –ª–æ—Ç–µ—Ä–µ–µ –∏ –∫—É–ø–∏–ª–∏ {tickets} –±–∏–ª–µ—Ç(–æ–≤)!\n–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞: –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!\n–°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞: {win_amount} TON\n–ë–∞–ª–∞–Ω—Å: {balance:.2f} TON",
        "en": "üéâ You participated in the lottery and bought {tickets} ticket(s)!\nResult: You won!\nWinnings: {win_amount} TON\nBalance: {balance:.2f} TON"
    },
    "lose_result": {
        "ru": "üéâ –í—ã –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ –ª–æ—Ç–µ—Ä–µ–µ –∏ –∫—É–ø–∏–ª–∏ {tickets} –±–∏–ª–µ—Ç(–æ–≤)!\n–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞: –í—ã –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏.\n–°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞: {win_amount} TON\n–ë–∞–ª–∞–Ω—Å: {balance:.2f} TON",
        "en": "üéâ You participated in the lottery and bought {tickets} ticket(s)!\nResult: You did not win.\nWinnings: {win_amount} TON\nBalance: {balance:.2f} TON"
    },
    "balance_text": {
        "ru": "üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} TON\n–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: {balance:.2f} TON",
        "en": "üí∞ Your balance: {balance:.2f} TON\nAvailable for withdrawal: {balance:.2f} TON"
    },
    "history": {
        "ru": "\n\n<b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:</b>\n",
        "en": "\n\n<b>Transaction history:</b>\n"
    },
    "no_history": {
        "ru": "–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.",
        "en": "No transactions."
    },
    "deposit_menu": {
        "ru": "üì• –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É:",
        "en": "üì• Deposit balance\n\nChoose the amount:"
    },
    "deposit_pay": {
        "ru": "üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã {amount} TON:\n\n–°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 1 —á–∞—Å.",
        "en": "üîó Payment link for {amount} TON:\n\nInvoice is valid for 1 hour."
    },
    "deposit_error": {
        "ru": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "en": "‚ùå Error creating invoice. Please try again later."
    },
    "check_payment_paid": {
        "ru": "‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} TON!",
        "en": "‚úÖ Balance topped up by {amount} TON!"
    },
    "check_payment_active": {
        "ru": "‚è≥ –û–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "en": "‚è≥ Payment not received yet. Please try again later."
    },
    "check_payment_status": {
        "ru": "‚ùå –°—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞: {status}",
        "en": "‚ùå Invoice status: {status}"
    },
    "check_payment_not_found": {
        "ru": "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
        "en": "‚ùå Payment not found or an error occurred."
    },
    "withdraw_menu": {
        "ru": "üì§ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance:.2f} TON\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>1.5</code>):\n\n<b>–ü–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –≤—ã–≤–æ–¥–æ–º —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –∫–æ—à–µ–ª—ë–∫ –≤ @CryptoBot!</b>",
        "en": "üì§ Withdraw funds\n\nAvailable: {balance:.2f} TON\nEnter the amount to withdraw (e.g.: <code>1.5</code>):\n\n<b>Before your first withdrawal, make sure you have an active wallet in @CryptoBot!</b>"
    },
    "withdraw_min": {
        "ru": "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 1 TON",
        "en": "‚ùå Minimum withdrawal amount: 1 TON"
    },
    "withdraw_success": {
        "ru": "‚úÖ {amount} TON –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à CryptoBot-–∫–æ—à–µ–ª—ë–∫!",
        "en": "‚úÖ {amount} TON sent to your CryptoBot wallet!"
    },
    "withdraw_error": {
        "ru": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–ª–∏ @CryptoBot –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "en": "‚ùå Withdrawal error. Make sure you have started @CryptoBot and try again."
    },
    "withdraw_not_enough": {
        "ru": "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.",
        "en": "‚ùå Not enough funds."
    },
    "promo_text": {
        "ru": "<b>üéÅ –ê–∫—Ü–∏–∏ –∏ –±–æ–Ω—É—Å—ã LOTTY TON</b>\n\n<b>1. –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n‚Äî –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ (—Ä–∞–∑–¥–µ–ª üë• –†–µ—Ñ–µ—Ä–∞–ª—ã).\n‚Äî –ü–æ–ª—É—á–∞–π—Ç–µ 15% –æ—Ç –≤—Å–µ—Ö –ø–æ–∫—É–ø–æ–∫ –±–∏–ª–µ—Ç–æ–≤ –≤–∞—à–∏–º–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏.\n\n<b>2. –ö—ç—à–±—ç–∫ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ</b>\n‚Äî –ö–∞–∂–¥—É—é —Å—É–±–±–æ—Ç—É –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 3% –∫—ç—à–±—ç–∫–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å —Å –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤.\n\n<b>3. –°–∫–∏–¥–∫–∏ –Ω–∞ –º–∞—Å—Å–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤</b>\n‚Äî 3 –±–∏–ª–µ—Ç–∞ = 2.9 TON (—ç–∫–æ–Ω–æ–º–∏—è 0.1 TON)\n‚Äî 10 –±–∏–ª–µ—Ç–æ–≤ = 9 TON (—ç–∫–æ–Ω–æ–º–∏—è 1 TON)\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –∞–∫—Ü–∏—è–º–∏ –∏ –±–æ–Ω—É—Å–∞–º–∏ ‚Äî –æ–Ω–∏ –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –∑–¥–µ—Å—å!",
        "en": "<b>üéÅ LOTTY TON Promotions and Bonuses</b>\n\n<b>1. Referral Program</b>\n‚Äî Invite friends using your referral link (see üë• Referrals).\n‚Äî Get 15% of all ticket purchases made by your referrals.\n\n<b>2. Weekend Cashback</b>\n‚Äî Every Saturday and Sunday you receive 3% cashback on every ticket purchase.\n\n<b>3. Discounts for bulk ticket purchases</b>\n‚Äî 3 tickets = 2.9 TON (save 0.1 TON)\n‚Äî 10 tickets = 9 TON (save 1 TON)\n\nStay tuned for new promotions and bonuses ‚Äî they will appear here!"
    },
    "rules_page1": {
        "ru": "<b>üìú –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã LOTTY TON</b>\n\n<b>1. –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è</b>\n- LOTTY TON ‚Äî —ç—Ç–æ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–æ—Ç, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –±–∏–ª–µ—Ç—ã, —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö –∏ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–∑—ã.\n\n<b>2. –ë–∞–ª–∞–Ω—Å –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b>\n- –í–∞—à –±–∞–ª–∞–Ω—Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ TON (Toncoin).\n- –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ <a href='https://t.me/CryptoBot'>CryptoBot</a> (üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å).\n- CryptoBot ‚Äî —ç—Ç–æ –Ω–∞–¥—ë–∂–Ω—ã–π –ø–ª–∞—Ç—ë–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å, —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π Telegram –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π.\n- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî 1 TON.\n\n<b>3. –ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –∏ —Ä–æ–∑—ã–≥—Ä—ã—à</b>\n- –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ª–æ—Ç–µ—Ä–µ–µ –∫—É–ø–∏—Ç–µ –±–∏–ª–µ—Ç—ã (üé´ LOTTY TON).\n- –î–æ—Å—Ç—É–ø–Ω—ã –ø–∞–∫–µ—Ç—ã: 1 –±–∏–ª–µ—Ç (1 TON), 3 –±–∏–ª–µ—Ç–∞ (2.9 TON), 10 –±–∏–ª–µ—Ç–æ–≤ (9 TON).\n- –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–æ–∑—ã–≥—Ä—ã—à: –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–∏–≥—Ä–∞—Ç—å –æ—Ç 0.01 TON –¥–æ 25 000 TON.\n- –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∏ –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ë–∞–ª–∞–Ω—Å¬ª.",
        "en": "<b>üìú LOTTY TON Game Rules</b>\n\n<b>1. General</b>\n- LOTTY TON is a lottery bot where you can buy tickets, participate in draws, and win prizes.\n\n<b>2. Balance and Deposit</b>\n- Your balance is shown in TON (Toncoin).\n- You can top up your balance via <a href='https://t.me/CryptoBot'>CryptoBot</a> (üì• Deposit).\n- CryptoBot is a reliable payment service recommended by Telegram for working with cryptocurrency.\n- Minimum deposit amount is 1 TON.\n\n<b>3. Ticket Purchase and Draw</b>\n- To participate, buy tickets (üé´ LOTTY TON).\n- Available packages: 1 ticket (1 TON), 3 tickets (2.9 TON), 10 tickets (9 TON).\n- After purchasing tickets, a draw takes place: you can win from 0.01 TON to 25,000 TON.\n- Draw results and transaction history are shown in the Balance section."
    },
    "rules_page2": {
        "ru": "<b>4. –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n- –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ CryptoBot (üì§ –í—ã–≤–æ–¥).\n- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ ‚Äî 1 TON.\n- –ü–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –≤—ã–≤–æ–¥–æ–º —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –∫–æ—à–µ–ª—ë–∫ –≤ @CryptoBot.\n- –ù–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –º–æ–∂–µ—Ç –≤–∑–∏–º–∞—Ç—å—Å—è –∫–æ–º–∏—Å—Å–∏—è 0.1 TON.\n\n<b>5. –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n- –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ (üë• –†–µ—Ñ–µ—Ä–∞–ª—ã).\n- –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 15% –æ—Ç –≤—Å–µ—Ö –ø–æ–∫—É–ø–æ–∫ –±–∏–ª–µ—Ç–æ–≤ –≤–∞—à–∏–º–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏.\n- –í —Ä–∞–∑–¥–µ–ª–µ ¬´–†–µ—Ñ–µ—Ä–∞–ª—ã¬ª –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã.\n\n<b>6. –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å</b>\n- –ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫–∏. –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –º–æ–∂–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é (¬´üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫¬ª).\n\n<b>7. –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</b>\n- –í—Å—è –≤–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –≤—ã–≤–æ–¥—ã, –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤, –≤—ã–∏–≥—Ä—ã—à–∏, –±–æ–Ω—É—Å—ã) –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π.\n\n<b>8. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —á–µ—Å—Ç–Ω–æ—Å—Ç—å</b>\n- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.\n- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.\n\n<b>9. –ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n- –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: @support",
        "en": "<b>4. Withdrawals</b>\n- You can withdraw funds via CryptoBot (üì§ Withdraw).\n- Minimum withdrawal amount is 1 TON.\n- Before your first withdrawal, make sure you have an active wallet in @CryptoBot.\n- A 0.1 TON fee may be charged for withdrawals.\n\n<b>5. Referral Program</b>\n- Invite friends using your referral link (üë• Referrals).\n- You receive 15% of all ticket purchases made by your referrals.\n- Your link, stats, and earned bonuses are shown in the Referrals section.\n\n<b>6. Multilanguage</b>\n- The bot supports Russian and English. You can change the language in the main menu ('üåê Change language').\n\n<b>7. Transaction History</b>\n- All your activity (deposits, withdrawals, ticket purchases, winnings, bonuses) is shown in your transaction history.\n\n<b>8. Security and Fairness</b>\n- The use of bots and automated scripts is prohibited.\n- The administration reserves the right to block users for violating the rules.\n\n<b>9. Support</b>\n- For any questions, contact: @support"
    },
    "next": {"ru": "‚Ä∫ –î–∞–ª–µ–µ", "en": "‚Ä∫ Next"},
    "prev": {"ru": "‚Äπ –ù–∞–∑–∞–¥", "en": "‚Äπ Back"},
    "rules_text": {
        "ru": "üìú –ü—Ä–∞–≤–∏–ª–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n1. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 1 TON\n2. –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n3. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–æ–≤\n\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @support",
        "en": "üìú Rules and support\n\n1. Minimum bet: 1 TON\n2. Withdrawals within 24 hours\n3. Use of bots is prohibited\n\nFor questions: @support"
    },
    "referral_menu": {
        "ru": "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {total_referrals} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {total_active})\n–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {earned} TON\n–ü–æ–∫—É–ø–æ–∫ –±–∏–ª–µ—Ç–æ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏: {total_purchases}\n",
        "en": "üë• Referral program\n\nYour referral link:\n{ref_link}\n\nInvited: {total_referrals} (active: {total_active})\nEarned all time: {earned} TON\nTickets bought by referrals: {total_purchases}\n"
    },
    "referral_last_active": {
        "ru": "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã (user_id):\n",
        "en": "Last active referrals (user_id):\n"
    },
    "referral_bonus_info": {
        "ru": "\n–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 15% –æ—Ç –≤—Å–µ—Ö –ø–æ–∫—É–ø–æ–∫ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!",
        "en": "\nYou receive 15% from all your referrals' ticket purchases!"
    },
    "test_deposit_success": {
        "ru": "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω 1 TON.",
        "en": "üß™ Test deposit successful! 1 TON has been credited to your balance."
    },
    "add10_success": {
        "ru": "‚úÖ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 TON!",
        "en": "‚úÖ 10 TON have been credited to your balance!"
    },
    "no_access": {
        "ru": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞",
        "en": "No access"
    },
    "history_game": {
        "ru": "–ü–æ–∫—É–ø–∫–∞ {tickets} –±–∏–ª–µ—Ç(–æ–≤)",
        "en": "Purchase of {tickets} ticket(s)"
    },
    "history_win": {
        "ru": "–í—ã–∏–≥—Ä—ã—à –≤ –ª–æ—Ç–µ—Ä–µ–µ: {amount} TON",
        "en": "Lottery win: {amount} TON"
    },
    "history_referral_bonus": {
        "ru": "–ë–æ–Ω—É—Å –∑–∞ –ø–æ–∫—É–ø–∫—É –±–∏–ª–µ—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º {ref_id}",
        "en": "Bonus for referral's ticket purchase {ref_id}"
    },
    "history_deposit": {
        "ru": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ CryptoBot ({amount} TON)",
        "en": "Deposit via CryptoBot ({amount} TON)"
    },
    "history_withdraw": {
        "ru": "–í—ã–≤–æ–¥ –≤ CryptoBot ({amount} TON)",
        "en": "Withdrawal to CryptoBot ({amount} TON)"
    },
    "history_test_deposit": {
        "ru": "–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–≥)",
        "en": "Test deposit (no real money)"
    },
    "history_cashback": {
        "ru": "–ö—ç—à–±–µ–∫ 3% –∑–∞ –ø–æ–∫—É–ø–∫—É –±–∏–ª–µ—Ç–æ–≤ (–≤—ã—Ö–æ–¥–Ω—ã–µ)",
        "en": "3% cashback for ticket purchase (weekend)"
    },
    "settings": {
        "ru": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        "en": "‚öôÔ∏è Settings"
    },
    "notifications": {
        "ru": "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {status}",
        "en": "üîî Notifications: {status}"
    },
    "notifications_on": {
        "ru": "–í–∫–ª.",
        "en": "On"
    },
    "notifications_off": {
        "ru": "–í—ã–∫–ª.",
        "en": "Off"
    },
    "clear_history": {
        "ru": "üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
        "en": "üóë Clear history"
    },
    "profile": {
        "ru": "üë§ –ü—Ä–æ—Ñ–∏–ª—å",
        "en": "üë§ Profile"
    },
    "delete_account": {
        "ru": "‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
        "en": "‚ùå Delete account"
    },
    "history_cleared": {
        "ru": "–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –æ—á–∏—â–µ–Ω–∞!",
        "en": "Transaction history cleared!"
    },
    "profile_info": {
        "ru": "<b>–ü—Ä–æ—Ñ–∏–ª—å</b>\nID: {user_id}\n–Ø–∑—ã–∫: {lang_display}\n–ë–∞–ª–∞–Ω—Å: {balance:.2f} TON\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created}",
        "en": "<b>Profile</b>\nID: {user_id}\nLanguage: {lang_display}\nBalance: {balance:.2f} TON\nRegistered: {created}"
    },
    "delete_confirm": {
        "ru": "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
        "en": "Are you sure you want to delete your account? This action is irreversible!"
    },
    "delete_yes": {
        "ru": "–î–∞, —É–¥–∞–ª–∏—Ç—å",
        "en": "Yes, delete"
    },
    "delete_no": {
        "ru": "–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞",
        "en": "No, cancel"
    },
    "account_deleted": {
        "ru": "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω.",
        "en": "Your account has been deleted."
    },
    "language_changed": {
        "ru": "–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!",
        "en": "Language changed successfully!"
    },
    "error_refresh": {
        "ru": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é –∑–∞–Ω–æ–≤–æ.",
        "en": "Failed to refresh message. Please reopen the menu."
    },
    "second_chance_winner": {
        "ru": "üéâ –í –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ ¬´–í—Ç–æ—Ä–æ–π —à–∞–Ω—Å¬ª –ø–æ–±–µ–¥–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {winner_id}!\n–û–Ω –ø–æ–ª—É—á–∞–µ—Ç 10 TON. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –ª–æ—Ç–µ—Ä–µ–µ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ ‚Äî –∏, –≤–æ–∑–º–æ–∂–Ω–æ, —É–¥–∞—á–∞ —É–ª—ã–±–Ω—ë—Ç—Å—è –≤–∞–º!",
        "en": "üéâ In the weekly 'Second Chance' draw, the winner is user with id {winner_id}!\nThey receive 10 TON. Congratulations!\nTake part in the lottery this week ‚Äî maybe you'll be the next lucky one!"
    },
}

def t(key, lang, **kwargs):
    return translations[key][lang].format(**kwargs)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(user_id=None, lang='ru'):
    builder = InlineKeyboardBuilder()
    # –ö–Ω–æ–ø–∫–∞ LOTTY TON —Å–≤–µ—Ä—Ö—É
    builder.row(
        InlineKeyboardButton(text=t("play", lang), callback_data="play")
    )
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
    builder.row(
        InlineKeyboardButton(text=t("balance", lang), callback_data="balance"),
        InlineKeyboardButton(text=t("deposit", lang), callback_data="deposit")
    )
    builder.row(
        InlineKeyboardButton(text=t("withdraw", lang), callback_data="withdraw"),
        InlineKeyboardButton(text=t("promo_btn", lang), callback_data="promo")
    )
    builder.row(
        InlineKeyboardButton(text=t("rules_btn", lang), callback_data="rules"),
        InlineKeyboardButton(text=t("referral", lang), callback_data="referral")
    )
    # –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
    builder.row(
        InlineKeyboardButton(text=t("change_lang", lang), callback_data="change_lang")
    )
    if user_id == ADMIN_ID:
        builder.row(InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –í—Ç–æ—Ä–æ–π —à–∞–Ω—Å", callback_data="second_chance_test"))
        builder.row(InlineKeyboardButton(text=t("add10", lang), callback_data="add10"))
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(CommandStart())
async def start_command(message: types.Message, command: CommandObject):
    user = await db.get_user(message.from_user.id)
    username = message.from_user.username or message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω –∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç ref_
    ref_id = None
    if command.args and command.args.startswith("ref_"):
        try:
            ref_id = int(command.args[4:])
        except Exception:
            ref_id = None
    if ref_id and ref_id != message.from_user.id:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
        user.invited_by = ref_id
        await db.update_user(user)
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
        ref_user = await db.get_user(ref_id)
        referrals = db.get_referrals(ref_user)
        if message.from_user.id not in referrals:
            referrals.append(message.from_user.id)
            db.set_referrals(ref_user, referrals)
            await db.update_user(ref_user)
    if not getattr(user, "lang", None):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text=translations["button_ru"]["ru"], callback_data="lang_ru"),
            InlineKeyboardButton(text=translations["button_en"]["en"], callback_data="lang_en")
        )
        await message.answer(
            translations["choose_language"]["ru"] + "\n" + translations["choose_language"]["en"],
            reply_markup=builder.as_markup()
        )
        return
    await message.answer(
        t("start", user.lang, balance=user.balance, username=username),
        reply_markup=main_menu(message.from_user.id, lang=user.lang),
        disable_web_page_preview=True
    )

# –†–∞–∑–¥–µ–ª –∏–≥—Ä—ã ‚Äî —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
@dp.callback_query(F.data == "play")
async def play_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text=t("agree_button", user.lang), callback_data="agree_lottery"))
    builder.add(InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_main"))
    await callback.message.edit_text(
        t("agree_lottery", user.lang),
        reply_markup=builder.as_markup()
    )

# –ü–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–∏—è ‚Äî –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∏–ª–µ—Ç–æ–≤
@dp.callback_query(F.data == "agree_lottery")
async def agree_lottery_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text=t("ticket_1", user.lang), callback_data="buy_1"))
    builder.row(InlineKeyboardButton(text=t("ticket_3", user.lang), callback_data="buy_3"))
    builder.row(InlineKeyboardButton(text=t("ticket_10", user.lang), callback_data="buy_10"))
    builder.row(InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_play"))
    await callback.message.edit_text(
        t("choose_tickets", user.lang),
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "back_to_play")
async def back_to_play_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text=t("agree_button", user.lang), callback_data="agree_lottery"))
    builder.add(InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_main"))
    await callback.message.edit_text(
        t("agree_lottery", user.lang),
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "back_to_main")
async def back_to_main_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç '‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.', –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if callback.message.text and "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞." in callback.message.text:
        await callback.message.answer(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–æ—Ç!\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã!",
            reply_markup=main_menu(callback.from_user.id, lang=user.lang)
        )
        return
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ —Å—Ç–∏–∫–µ—Ä–∞ –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º), –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not callback.message.text:
        await callback.message.answer(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–æ—Ç!\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã!",
            reply_markup=main_menu(callback.from_user.id, lang=user.lang)
        )
        return
    try:
        await callback.message.edit_text(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–æ—Ç!\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã!",
            reply_markup=main_menu(callback.from_user.id, lang=user.lang)
        )
    except Exception:
        await callback.message.answer(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–æ—Ç!\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã!",
            reply_markup=main_menu(callback.from_user.id, lang=user.lang)
        )

# –ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –∏ —Ä–æ–∑—ã–≥—Ä—ã—à
@dp.callback_query(F.data.in_(["buy_1", "buy_3", "buy_10"]))
async def buy_tickets_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    ticket_map = {
        "buy_1": (1, 1.0),
        "buy_3": (3, 2.9),
        "buy_10": (10, 9.0)
    }
    tickets, price = ticket_map[callback.data]
    if user.balance < price:
        await callback.message.edit_text(
            t("not_enough_funds", user.lang, tickets=tickets, balance=user.balance),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_main")
            ]])
        )
        return
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    user.balance -= price
    # –£—á—ë—Ç –ø–æ–∫—É–ø–æ–∫ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    user.ref_purchases = getattr(user, "ref_purchases", 0) + 1
    await db.update_user(user)
    # –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
    history = db.get_history(user)
    history.append({"type": "game", "tickets": tickets, "amount": -price})
    # –ö—ç—à–±–µ–∫ –∑–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ
    now = datetime.datetime.now()
    if now.weekday() in [5, 6]:  # 5 - —Å—É–±–±–æ—Ç–∞, 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        cashback = round(price * 0.03, 2)
        user.balance += cashback
        history.append({"type": "cashback", "amount": cashback})
    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å (15% –æ—Ç –ø–æ–∫—É–ø–∫–∏)
    if getattr(user, "invited_by", None):
        ref_user = await db.get_user(user.invited_by)
        bonus = round(price * getattr(ref_user, "ref_percent", 0.15), 2)
        ref_user.balance += bonus
        ref_user.earned = getattr(ref_user, "earned", 0.0) + bonus
        ref_history = db.get_history(ref_user)
        ref_history.append({"type": "referral_bonus", "ref_id": user.user_id, "amount": bonus})
        db.set_history(ref_user, ref_history)
        await db.update_user(ref_user)
    # –í—ã–∏–≥—Ä—ã—à: —Å–ª—É—á–∞–π–Ω–æ –æ—Ç 10% –¥–æ 50% –æ—Ç —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏
    win_percent = random.uniform(0.1, 0.5)
    win_amount = round(price * win_percent, 2)
    if win_amount > 0:
        user.balance += win_amount
        history.append({"type": "win", "amount": win_amount})
        db.set_history(user, history)
        await db.update_user(user)
        # –°—Ç–∏–∫–µ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        await callback.message.answer_sticker("CAACAgIAAxkBAAEOhK9oKl600GvZPoV6OROtfhAJOr1glAACAwEAAladvQoC5dF4h-X6TzYE")
        await callback.message.answer(
            t("win_result", user.lang, tickets=tickets, win_amount=win_amount, balance=user.balance),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text=t("main_menu", user.lang), callback_data="lottery_back_to_main")
            ]])
        )
    else:
        db.set_history(user, history)
        await db.update_user(user)
        await callback.message.edit_text(
            t("lose_result", user.lang, tickets=tickets, win_amount=win_amount, balance=user.balance),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_main")
            ]])
        )

# –†–∞–∑–¥–µ–ª –±–∞–ª–∞–Ω—Å–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
@dp.callback_query(F.data == "balance")
async def balance_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    history = db.get_history(user)
    history_text = t("history", user.lang)
    if history:
        for h in history[-10:][::-1]:
            desc = ""
            amount = ""
            if isinstance(h, dict):
                if h.get("type") == "game":
                    desc = t("history_game", user.lang, tickets=h.get("tickets"))
                    amount = h.get("amount", "")
                elif h.get("type") == "win":
                    desc = t("history_win", user.lang, amount=h.get("amount"))
                    amount = h.get("amount", "")
                elif h.get("type") == "referral_bonus":
                    desc = t("history_referral_bonus", user.lang, ref_id=h.get("ref_id"))
                    amount = h.get("amount", "")
                elif h.get("type") == "deposit":
                    desc = t("history_deposit", user.lang, amount=h.get("amount"))
                    amount = h.get("amount", "")
                elif h.get("type") == "withdraw":
                    desc = t("history_withdraw", user.lang, amount=h.get("amount"))
                    amount = h.get("amount", "")
                elif h.get("type") == "test_deposit":
                    desc = t("history_test_deposit", user.lang)
                    amount = h.get("amount", "")
                elif h.get("type") == "cashback":
                    desc = t("history_cashback", user.lang)
                    amount = h.get("amount", "")
                else:
                    desc = str(h)
            else:
                desc = str(h)
            if amount != "":
                history_text += f"‚Ä¢ {desc} ({amount} TON)\n"
            else:
                history_text += f"‚Ä¢ {desc}\n"
    else:
        history_text += t("no_history", user.lang)
    await callback.message.edit_text(
        t("balance_text", user.lang, balance=user.balance) +
        history_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_main")
        ]])
    )

# –†–∞–∑–¥–µ–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query(F.data == "deposit")
async def deposit_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üí≥ 1 TON", callback_data="deposit_1"))
    builder.add(InlineKeyboardButton(text="üí≥ 5 TON", callback_data="deposit_5"))
    builder.add(InlineKeyboardButton(text="üí≥ 10 TON", callback_data="deposit_10"))
    # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    builder.add(InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="test_deposit"))
    builder.row(InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_main"))
    await callback.message.edit_text(
        t("deposit_menu", user.lang),
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data.startswith("deposit_"))
async def deposit_amount_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    amount = float(callback.data.split("_")[1])
    user_id = callback.from_user.id

    invoice = await cryptopay.create_invoice(
        amount=amount,
        description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {user_id}",
        payload=str(user_id)
    )

    if invoice.get("ok"):
        pay_url = invoice["result"]["pay_url"]
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url))
        builder.add(InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{invoice['result']['invoice_id']}"))
        builder.row(InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_deposit"))

        await callback.message.edit_text(
            t("deposit_pay", user.lang, amount=amount),
            reply_markup=builder.as_markup()
        )
    else:
        await callback.message.edit_text(t("deposit_error", user.lang))

@dp.callback_query(F.data == "back_to_deposit")
async def back_to_deposit_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üí≥ 1 TON", callback_data="deposit_1"))
    builder.add(InlineKeyboardButton(text="üí≥ 5 TON", callback_data="deposit_5"))
    builder.add(InlineKeyboardButton(text="üí≥ 10 TON", callback_data="deposit_10"))
    builder.row(InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_main"))
    if callback.message.text and t("check_payment_not_found", user.lang) in callback.message.text:
        await callback.message.answer(
            t("deposit_menu", user.lang),
            reply_markup=builder.as_markup()
        )
    else:
        await callback.message.edit_text(
            t("deposit_menu", user.lang),
            reply_markup=builder.as_markup()
        )

@dp.callback_query(F.data.startswith("check_"))
async def check_payment_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    invoice_id = callback.data.split("_")[1]
    invoice = await cryptopay.check_invoice(invoice_id)
    menu_markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{invoice_id}")],
        [InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_deposit")]
    ])

    if invoice.get("ok") and invoice.get("result"):
        invoice_data = invoice["result"][0]
        status = invoice_data.get("status")
        if status == "paid":
            user_id = int(invoice_data.get("payload", callback.from_user.id))
            amount = float(invoice_data.get("amount", 0))
            user = await db.get_user(user_id)
            user.balance += amount
            history = db.get_history(user)
            history.append({"type": "deposit", "amount": amount, "desc": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ CryptoBot ({amount} TON)"})
            db.set_history(user, history)
            await db.update_user(user)
            await callback.message.edit_text(
                t("check_payment_paid", user.lang, amount=amount),
                reply_markup=menu_markup
            )
        elif status == "active":
            await callback.message.edit_text(
                t("check_payment_active", user.lang),
                reply_markup=menu_markup
            )
        else:
            await callback.message.edit_text(
                t("check_payment_status", user.lang, status=status),
                reply_markup=menu_markup
            )
    else:
        await callback.message.answer_sticker("CAACAgIAAxkBAAEOi95oMFEAAcgO-YbH4g76A2cfNt3zXzUAAgIBAAJWnb0KTuJsgctA5P82BA")
        await callback.message.answer(
            t("check_payment_not_found", user.lang),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{invoice_id}")],
                [InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_deposit")]
            ])
        )

# –†–∞–∑–¥–µ–ª –≤—ã–≤–æ–¥–∞
@dp.callback_query(F.data == "withdraw")
async def withdraw_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    menu_markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_main")
    ]])
    if user.balance < 1:
        await callback.message.edit_text(t("withdraw_min", user.lang), reply_markup=menu_markup)
        return

    await callback.message.edit_text(
        t("withdraw_menu", user.lang, balance=user.balance),
        reply_markup=menu_markup
    )

@dp.message(F.text.regexp(r"^\d+(\.\d+)?$"))
async def process_withdrawal(message: types.Message):
    amount = float(message.text)
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    menu_markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_main")
    ]])

    if user.balance >= amount:
        success = await db.process_withdrawal(user_id, amount, cryptopay)
        if success:
            history = db.get_history(user)
            history.append({"type": "withdraw", "amount": amount, "desc": f"–í—ã–≤–æ–¥ –≤ CryptoBot ({amount} TON)"})
            db.set_history(user, history)
            await db.update_user(user)
            await message.answer(t("withdraw_success", user.lang, amount=amount), reply_markup=menu_markup)
        else:
            await message.answer(t("withdraw_error", user.lang), reply_markup=menu_markup)
    else:
        await message.answer(t("withdraw_not_enough", user.lang), reply_markup=menu_markup)

# –†–∞–∑–¥–µ–ª –∞–∫—Ü–∏–π
@dp.callback_query(F.data == "promo")
async def promo_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    await callback.message.edit_text(
        t("promo_text", user.lang),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[ 
            InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_main")
        ]])
    )

# –†–∞–∑–¥–µ–ª –ø—Ä–∞–≤–∏–ª
@dp.callback_query(F.data == "rules")
async def rules_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    lang = user.lang
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text=t("next", lang), callback_data="rules_next"))
    builder.row(InlineKeyboardButton(text=t("back", lang), callback_data="back_to_main"))
    await callback.message.edit_text(
        t("rules_page1", lang),
        reply_markup=builder.as_markup(),
        disable_web_page_preview=True
    )

@dp.callback_query(F.data == "rules_next")
async def rules_next_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    lang = user.lang
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text=t("prev", lang), callback_data="rules_prev"))
    await callback.message.edit_text(
        t("rules_page2", lang),
        reply_markup=builder.as_markup(),
        disable_web_page_preview=True
    )

@dp.callback_query(F.data == "rules_prev")
async def rules_prev_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    lang = user.lang
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text=t("next", lang), callback_data="rules_next"))
    builder.row(InlineKeyboardButton(text=t("back", lang), callback_data="back_to_main"))
    await callback.message.edit_text(
        t("rules_page1", lang),
        reply_markup=builder.as_markup(),
        disable_web_page_preview=True
    )

# –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
@dp.callback_query(F.data == "referral")
async def referral_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    referrals = db.get_referrals(user)
    total_referrals = len(referrals)
    active_referrals = []
    for rid in referrals:
        ref_user = await db.get_user(rid)
        if getattr(ref_user, "ref_purchases", 0) > 0:
            active_referrals.append(rid)
    total_active = len(active_referrals)
    earned = round(getattr(user, "earned", 0.0), 2)
    last_active = active_referrals[-3:]
    total_purchases = 0
    for rid in referrals:
        ref_user = await db.get_user(rid)
        total_purchases += getattr(ref_user, "ref_purchases", 0)
    lang = user.lang
    ref_link = f"https://t.me/{(await bot.get_me()).username}?start=ref_{user_id}"
    text = t("referral_menu", lang, ref_link=ref_link, total_referrals=total_referrals, total_active=total_active, earned=earned, total_purchases=total_purchases)
    if last_active:
        text += t("referral_last_active", lang)
        for rid in last_active:
            text += f"- {rid}\n"
    text += t("referral_bonus_info", lang)
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text=t("back", lang), callback_data="back_to_main")
        ]])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è 10 TON (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@dp.callback_query(F.data == "add10")
async def add10_handler(callback: types.CallbackQuery):
    if callback.from_user.id == ADMIN_ID:
        user = await db.get_user(callback.from_user.id)
        user.balance += 10
        await db.update_user(user)
        await callback.message.edit_text(
            "‚úÖ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 TON!",
            reply_markup=main_menu(callback.from_user.id, lang=user.lang)
        )
    else:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

# –î–æ–±–∞–≤–ª—è—é –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è lottery_back_to_main
@dp.callback_query(F.data == "lottery_back_to_main")
async def lottery_back_to_main_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    await callback.message.answer(
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–æ—Ç!\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã!",
        reply_markup=main_menu(callback.from_user.id, lang=user.lang)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query(F.data == "test_deposit")
async def test_deposit_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    user.balance += 1  # –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ 1 TON
    history = db.get_history(user)
    history.append({"type": "test_deposit", "amount": 1, "desc": "–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–≥)"})
    db.set_history(user, history)
    await db.update_user(user)
    await callback.message.edit_text(
        t("test_deposit_success", user.lang),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text=t("main_menu", user.lang), callback_data="back_to_main")
        ]])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.callback_query(F.data == "change_lang")
async def change_lang_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
        InlineKeyboardButton(text="English", callback_data="lang_en")
    )
    try:
        await callback.message.edit_text(
            t("choose_language", user.lang),
            reply_markup=builder.as_markup()
        )
    except TelegramBadRequest:
        await callback.answer(t("error_refresh", user.lang))
    await callback.answer()

@dp.callback_query(F.data.in_(["lang_ru", "lang_en"]))
async def set_language(callback: types.CallbackQuery):
    lang = "ru" if callback.data == "lang_ru" else "en"
    await db.update_user_language(callback.from_user.id, lang)
    user = await db.get_user(callback.from_user.id)
    username = callback.from_user.username or callback.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    try:
        await callback.message.edit_text(
            t("start", lang, balance=user.balance, username=username),
            reply_markup=main_menu(callback.from_user.id, lang=lang),
            disable_web_page_preview=True
        )
    except TelegramBadRequest:
        await callback.answer(t("language_changed", lang), show_alert=True)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.callback_query(F.data == "second_chance_test")
async def second_chance_test_handler(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    import random
    fake_id = str(random.randint(100000000, 999999999))
    winner_id_masked = fake_id[:-3] + "***"
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async with db.async_session() as session:
        from sqlalchemy import select
        result = await session.execute(select(User))
        users = result.scalars().all()
    count = 0
    for user in users:
        lang = getattr(user, "lang", "ru")
        try:
            await bot.send_message(
                user.user_id,
                t("second_chance_winner", lang, winner_id=winner_id_masked)
            )
            count += 1
        except Exception as e:
            print(f"[SecondChance] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")
    await callback.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count}", show_alert=True)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await db.init()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
