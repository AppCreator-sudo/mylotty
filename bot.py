import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from uuid import uuid4
from typing import Dict, Optional
from cryptopay import CryptoPay
import random
from db import AsyncDatabase
import os
from dotenv import load_dotenv

load_dotenv()
db = AsyncDatabase(os.getenv("DATABASE_URL"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv('API_TOKEN')
CRYPTOPAY_TOKEN = os.getenv('CRYPTOPAY_TOKEN')

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CryptoPay
cryptopay = CryptoPay(token=CRYPTOPAY_TOKEN)

ADMIN_ID = int(os.getenv('ADMIN_ID'))  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram user_id

# –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤
translations = {
    "start": {
        "ru": "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} TON",
        "en": "üéâ Welcome!\nYour balance: {balance:.2f} TON"
    },
    "choose_language": {
        "ru": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "en": "Select language:"
    },
    "button_ru": {
        "ru": "–†—É—Å—Å–∫–∏–π",
        "en": "Russian"
    },
    "button_en": {
        "ru": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
        "en": "English"
    },
    "play": {
        "ru": "ü¶ã –ò–≥—Ä–∞—Ç—å",
        "en": "ü¶ã Play"
    },
    "balance": {
        "ru": "üí∞ –ë–∞–ª–∞–Ω—Å",
        "en": "üí∞ Balance"
    },
    "deposit": {
        "ru": "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å",
        "en": "üí≥ Deposit"
    },
    "withdraw": {
        "ru": "üì§ –í—ã–≤–æ–¥",
        "en": "üì§ Withdraw"
    },
    "promo_btn": {
        "ru": "üéÅ –ê–∫—Ü–∏–∏",
        "en": "üéÅ Promotions"
    },
    "rules_btn": {
        "ru": "üìú –ü—Ä–∞–≤–∏–ª–∞",
        "en": "üìú Rules"
    },
    "referral": {
        "ru": "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã",
        "en": "üë• Referrals"
    },
    "back": {
        "ru": "‚Äπ –ù–∞–∑–∞–¥",
        "en": "‚Äπ Back"
    },
    "main_menu": {
        "ru": "üè† –í –º–µ–Ω—é",
        "en": "üè† Main menu"
    },
    "change_lang": {
        "ru": "üåê –Ø–∑—ã–∫",
        "en": "üåê Language"
    },
    "add10": {
        "ru": "üí∏ –ù–∞—á–∏—Å–ª–∏—Ç—å 10 TON",
        "en": "üí∏ Add 10 TON"
    },
    "agree_lottery": {
        "ru": "üé∞ –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã –≤—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å —Ç–µ–º, —á—Ç–æ –≤—ã–∏–≥—Ä—ã—à–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∏ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã.\n\n–ù–∞–∂–∏–º–∞—è '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å —ç—Ç–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏.",
        "en": "üé∞ Before you start playing, you must agree that winnings are determined randomly and are not guaranteed.\n\nBy clicking 'Continue', you confirm your agreement with these terms."
    },
    "agree_button": {
        "ru": "‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)",
        "en": "‚úÖ I agree"
    },
    "choose_tickets": {
        "ru": "üéüÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤:",
        "en": "üéüÔ∏è Choose the number of tickets:"
    },
    "ticket_1": {
        "ru": "1 –±–∏–ª–µ—Ç ‚Äî 1 TON",
        "en": "1 ticket ‚Äî 1 TON"
    },
    "ticket_3": {
        "ru": "3 –±–∏–ª–µ—Ç–∞ ‚Äî 2.9 TON",
        "en": "3 tickets ‚Äî 2.9 TON"
    },
    "ticket_10": {
        "ru": "10 –±–∏–ª–µ—Ç–æ–≤ ‚Äî 9 TON",
        "en": "10 tickets ‚Äî 9 TON"
    },
    "not_enough_funds": {
        "ru": "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {tickets} –±–∏–ª–µ—Ç–æ–≤.\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} TON",
        "en": "‚ùå Not enough funds to buy {tickets} tickets.\nYour balance: {balance:.2f} TON"
    },
    "win_result": {
        "ru": "üéâ –í—ã –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ –ª–æ—Ç–µ—Ä–µ–µ –∏ –∫—É–ø–∏–ª–∏ {tickets} –±–∏–ª–µ—Ç(–æ–≤)!\n–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞: –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!\n–°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞: {win_amount} TON\n–ë–∞–ª–∞–Ω—Å: {balance:.2f} TON",
        "en": "üéâ You participated in the lottery and bought {tickets} ticket(s)!\nResult: You won!\nWinnings: {win_amount} TON\nBalance: {balance:.2f} TON"
    },
    "lose_result": {
        "ru": "üéâ –í—ã –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ –ª–æ—Ç–µ—Ä–µ–µ –∏ –∫—É–ø–∏–ª–∏ {tickets} –±–∏–ª–µ—Ç(–æ–≤)!\n–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞: –í—ã –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏.\n–°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞: {win_amount} TON\n–ë–∞–ª–∞–Ω—Å: {balance:.2f} TON",
        "en": "üéâ You participated in the lottery and bought {tickets} ticket(s)!\nResult: You did not win.\nWinnings: {win_amount} TON\nBalance: {balance:.2f} TON"
    },
    "balance_text": {
        "ru": "üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} TON\n–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: {balance:.2f} TON",
        "en": "üí∞ Your balance: {balance:.2f} TON\nAvailable for withdrawal: {balance:.2f} TON"
    },
    "history": {
        "ru": "\n\n<b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:</b>\n",
        "en": "\n\n<b>Transaction history:</b>\n"
    },
    "no_history": {
        "ru": "–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.",
        "en": "No transactions."
    },
    "deposit_menu": {
        "ru": "üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É:",
        "en": "üí≥ Deposit balance\n\nChoose the amount:"
    },
    "deposit_pay": {
        "ru": "üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã {amount} TON:\n\n–°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 1 —á–∞—Å.",
        "en": "üîó Payment link for {amount} TON:\n\nInvoice is valid for 1 hour."
    },
    "deposit_error": {
        "ru": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "en": "‚ùå Error creating invoice. Please try again later."
    },
    "check_payment_paid": {
        "ru": "‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} TON!",
        "en": "‚úÖ Balance topped up by {amount} TON!"
    },
    "check_payment_active": {
        "ru": "‚è≥ –û–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "en": "‚è≥ Payment not received yet. Please try again later."
    },
    "check_payment_status": {
        "ru": "‚ùå –°—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞: {status}",
        "en": "‚ùå Invoice status: {status}"
    },
    "check_payment_not_found": {
        "ru": "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
        "en": "‚ùå Payment not found or an error occurred."
    },
    "withdraw_menu": {
        "ru": "üì§ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance:.2f} TON\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>1.5</code>):\n\n<b>–ü–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –≤—ã–≤–æ–¥–æ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ @CryptoBot, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª—ë–∫!</b>",
        "en": "üì§ Withdraw funds\n\nAvailable: {balance:.2f} TON\nEnter the amount to withdraw (e.g.: <code>1.5</code>):\n\n<b>Before your first withdrawal, be sure to start @CryptoBot to create a wallet!</b>"
    },
    "withdraw_min": {
        "ru": "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 1 TON",
        "en": "‚ùå Minimum withdrawal amount: 1 TON"
    },
    "withdraw_success": {
        "ru": "‚úÖ {amount} TON –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à CryptoBot-–∫–æ—à–µ–ª—ë–∫!",
        "en": "‚úÖ {amount} TON sent to your CryptoBot wallet!"
    },
    "withdraw_error": {
        "ru": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–ª–∏ @CryptoBot –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "en": "‚ùå Withdrawal error. Make sure you have started @CryptoBot and try again."
    },
    "withdraw_not_enough": {
        "ru": "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.",
        "en": "‚ùå Not enough funds."
    },
    "promo_text": {
        "ru": "üéÅ –ê–∫—Ü–∏–∏ –∏ –±–æ–Ω—É—Å—ã\n\n–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!",
        "en": "üéÅ Promotions and bonuses\n\nSpecial offers will appear here soon!"
    },
    "rules_text": {
        "ru": "üìú –ü—Ä–∞–≤–∏–ª–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n1. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 1 TON\n2. –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n3. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–æ–≤\n\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @support",
        "en": "üìú Rules and support\n\n1. Minimum bet: 1 TON\n2. Withdrawals within 24 hours\n3. Use of bots is prohibited\n\nFor questions: @support"
    },
    "referral_menu": {
        "ru": "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {total_referrals} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {total_active})\n–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {earned} TON\n–ü–æ–∫—É–ø–æ–∫ –±–∏–ª–µ—Ç–æ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏: {total_purchases}\n",
        "en": "üë• Referral program\n\nYour referral link:\n{ref_link}\n\nInvited: {total_referrals} (active: {total_active})\nEarned all time: {earned} TON\nTickets bought by referrals: {total_purchases}\n"
    },
    "referral_last_active": {
        "ru": "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã (user_id):\n",
        "en": "Last active referrals (user_id):\n"
    },
    "referral_bonus_info": {
        "ru": "\n–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 15% –æ—Ç –≤—Å–µ—Ö –ø–æ–∫—É–ø–æ–∫ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!",
        "en": "\nYou receive 15% from all your referrals' ticket purchases!"
    },
    "test_deposit_success": {
        "ru": "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω 1 TON.",
        "en": "üß™ Test deposit successful! 1 TON has been credited to your balance."
    },
    "add10_success": {
        "ru": "‚úÖ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 TON!",
        "en": "‚úÖ 10 TON have been credited to your balance!"
    },
    "no_access": {
        "ru": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞",
        "en": "No access"
    },
    "history_game": {
        "ru": "–ü–æ–∫—É–ø–∫–∞ {tickets} –±–∏–ª–µ—Ç(–æ–≤)",
        "en": "Purchase of {tickets} ticket(s)"
    },
    "history_win": {
        "ru": "–í—ã–∏–≥—Ä—ã—à –≤ –ª–æ—Ç–µ—Ä–µ–µ: {amount} TON",
        "en": "Lottery win: {amount} TON"
    },
    "history_referral_bonus": {
        "ru": "–ë–æ–Ω—É—Å –∑–∞ –ø–æ–∫—É–ø–∫—É –±–∏–ª–µ—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º {ref_id}",
        "en": "Bonus for referral's ticket purchase {ref_id}"
    },
    "history_deposit": {
        "ru": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ CryptoBot ({amount} TON)",
        "en": "Deposit via CryptoBot ({amount} TON)"
    },
    "history_withdraw": {
        "ru": "–í—ã–≤–æ–¥ –≤ CryptoBot ({amount} TON)",
        "en": "Withdrawal to CryptoBot ({amount} TON)"
    },
    "history_test_deposit": {
        "ru": "–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–≥)",
        "en": "Test deposit (no real money)"
    },
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ —Ö–æ–¥—É ...
}

def t(key, lang, **kwargs):
    return translations[key][lang].format(**kwargs)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(user_id=None, lang='ru'):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text=t("play", lang), callback_data="play"),
        InlineKeyboardButton(text=t("balance", lang), callback_data="balance")
    )
    builder.row(
        InlineKeyboardButton(text=t("deposit", lang), callback_data="deposit"),
        InlineKeyboardButton(text=t("withdraw", lang), callback_data="withdraw")
    )
    builder.row(
        InlineKeyboardButton(text=t("promo_btn", lang), callback_data="promo"),
        InlineKeyboardButton(text=t("rules_btn", lang), callback_data="rules")
    )
    builder.row(
        InlineKeyboardButton(text=t("referral", lang), callback_data="referral")
    )
    builder.row(
        InlineKeyboardButton(text=t("change_lang", lang), callback_data="change_lang")
    )
    if user_id == ADMIN_ID:
        builder.row(InlineKeyboardButton(text=t("add10", lang), callback_data="add10"))
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(CommandStart())
async def start_command(message: types.Message, command: CommandObject):
    user = await db.get_user(message.from_user.id)
    if not getattr(user, "lang", None):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text=translations["button_ru"]["ru"], callback_data="lang_ru"),
            InlineKeyboardButton(text=translations["button_en"]["en"], callback_data="lang_en")
        )
        await message.answer(
            translations["choose_language"]["ru"] + "\n" + translations["choose_language"]["en"],
            reply_markup=builder.as_markup()
        )
        return
    # –î–∞–ª—å—à–µ –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞, –Ω–æ –≤—Å–µ —Ç–µ–∫—Å—Ç—ã —á–µ—Ä–µ–∑ t(..., user.lang)
    await message.answer(
        t("start", user.lang, balance=user.balance),
        reply_markup=main_menu(message.from_user.id, lang=user.lang)
    )

# –†–∞–∑–¥–µ–ª –∏–≥—Ä—ã ‚Äî —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
@dp.callback_query(F.data == "play")
async def play_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text=t("agree_button", user.lang), callback_data="agree_lottery"))
    builder.add(InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_main"))
    await callback.message.edit_text(
        t("agree_lottery", user.lang),
        reply_markup=builder.as_markup()
    )

# –ü–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–∏—è ‚Äî –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∏–ª–µ—Ç–æ–≤
@dp.callback_query(F.data == "agree_lottery")
async def agree_lottery_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text=t("ticket_1", user.lang), callback_data="buy_1"))
    builder.row(InlineKeyboardButton(text=t("ticket_3", user.lang), callback_data="buy_3"))
    builder.row(InlineKeyboardButton(text=t("ticket_10", user.lang), callback_data="buy_10"))
    builder.row(InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_play"))
    await callback.message.edit_text(
        t("choose_tickets", user.lang),
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "back_to_play")
async def back_to_play_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text=t("agree_button", user.lang), callback_data="agree_lottery"))
    builder.add(InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_main"))
    await callback.message.edit_text(
        t("agree_lottery", user.lang),
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "back_to_main")
async def back_to_main_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç '‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.', –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if callback.message.text and "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞." in callback.message.text:
        await callback.message.answer(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–æ—Ç!\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã!",
            reply_markup=main_menu(callback.from_user.id, lang=user.lang)
        )
        return
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ —Å—Ç–∏–∫–µ—Ä–∞ –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º), –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not callback.message.text:
        await callback.message.answer(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–æ—Ç!\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã!",
            reply_markup=main_menu(callback.from_user.id, lang=user.lang)
        )
        return
    try:
        await callback.message.edit_text(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–æ—Ç!\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã!",
            reply_markup=main_menu(callback.from_user.id, lang=user.lang)
        )
    except Exception:
        await callback.message.answer(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–æ—Ç!\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã!",
            reply_markup=main_menu(callback.from_user.id, lang=user.lang)
        )

# –ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –∏ —Ä–æ–∑—ã–≥—Ä—ã—à
@dp.callback_query(F.data.in_(["buy_1", "buy_3", "buy_10"]))
async def buy_tickets_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    ticket_map = {
        "buy_1": (1, 1.0),
        "buy_3": (3, 2.9),
        "buy_10": (10, 9.0)
    }
    tickets, price = ticket_map[callback.data]
    if user.balance < price:
        await callback.message.edit_text(
            t("not_enough_funds", user.lang, tickets=tickets, balance=user.balance),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_main")
            ]])
        )
        return
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    user.balance -= price
    # –£—á—ë—Ç –ø–æ–∫—É–ø–æ–∫ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    user.ref_purchases = getattr(user, "ref_purchases", 0) + 1
    await db.update_user(user)
    # –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
    history = db.get_history(user)
    history.append({"type": "game", "tickets": tickets, "amount": -price})
    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å (15% –æ—Ç –ø–æ–∫—É–ø–∫–∏)
    if getattr(user, "invited_by", None):
        ref_user = await db.get_user(user.invited_by)
        bonus = round(price * 0.15, 2)
        ref_user.balance += bonus
        ref_user.earned = getattr(ref_user, "earned", 0.0) + bonus
        ref_history = db.get_history(ref_user)
        ref_history.append({"type": "referral_bonus", "ref_id": user.user_id, "amount": bonus})
        db.set_history(ref_user, ref_history)
        await db.update_user(ref_user)
    # –í—ã–∏–≥—Ä—ã—à: —Å–ª—É—á–∞–π–Ω–æ –æ—Ç 10% –¥–æ 50% –æ—Ç —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏
    win_percent = random.uniform(0.1, 0.5)
    win_amount = round(price * win_percent, 2)
    if win_amount > 0:
        user.balance += win_amount
        history.append({"type": "win", "amount": win_amount})
        db.set_history(user, history)
        await db.update_user(user)
        # –°—Ç–∏–∫–µ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        await callback.message.answer_sticker("CAACAgIAAxkBAAEOhK9oKl600GvZPoV6OROtfhAJOr1glAACAwEAAladvQoC5dF4h-X6TzYE")
        await callback.message.answer(
            t("win_result", user.lang, tickets=tickets, win_amount=win_amount, balance=user.balance),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text=t("main_menu", user.lang), callback_data="lottery_back_to_main")
            ]])
        )
    else:
        db.set_history(user, history)
        await db.update_user(user)
        await callback.message.edit_text(
            t("lose_result", user.lang, tickets=tickets, win_amount=win_amount, balance=user.balance),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_main")
            ]])
        )

# –†–∞–∑–¥–µ–ª –±–∞–ª–∞–Ω—Å–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
@dp.callback_query(F.data == "balance")
async def balance_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    history = db.get_history(user)
    history_text = t("history", user.lang)
    if history:
        for h in history[-10:][::-1]:
            desc = ""
            amount = ""
            if isinstance(h, dict):
                if h.get("type") == "game":
                    desc = t("history_game", user.lang, tickets=h.get("tickets"))
                    amount = h.get("amount", "")
                elif h.get("type") == "win":
                    desc = t("history_win", user.lang, amount=h.get("amount"))
                    amount = h.get("amount", "")
                elif h.get("type") == "referral_bonus":
                    desc = t("history_referral_bonus", user.lang, ref_id=h.get("ref_id"))
                    amount = h.get("amount", "")
                elif h.get("type") == "deposit":
                    desc = t("history_deposit", user.lang, amount=h.get("amount"))
                    amount = h.get("amount", "")
                elif h.get("type") == "withdraw":
                    desc = t("history_withdraw", user.lang, amount=h.get("amount"))
                    amount = h.get("amount", "")
                elif h.get("type") == "test_deposit":
                    desc = t("history_test_deposit", user.lang)
                    amount = h.get("amount", "")
                else:
                    desc = str(h)
            else:
                desc = str(h)
            if amount != "":
                history_text += f"‚Ä¢ {desc} ({amount} TON)\n"
            else:
                history_text += f"‚Ä¢ {desc}\n"
    else:
        history_text += t("no_history", user.lang)
    await callback.message.edit_text(
        t("balance_text", user.lang, balance=user.balance) +
        history_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_main")
        ]])
    )

# –†–∞–∑–¥–µ–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query(F.data == "deposit")
async def deposit_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üí≥ 1 TON", callback_data="deposit_1"))
    builder.add(InlineKeyboardButton(text="üí≥ 5 TON", callback_data="deposit_5"))
    builder.add(InlineKeyboardButton(text="üí≥ 10 TON", callback_data="deposit_10"))
    # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    builder.add(InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="test_deposit"))
    builder.row(InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_main"))
    await callback.message.edit_text(
        t("deposit_menu", user.lang),
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data.startswith("deposit_"))
async def deposit_amount_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    amount = float(callback.data.split("_")[1])
    user_id = callback.from_user.id

    invoice = await cryptopay.create_invoice(
        amount=amount,
        description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {user_id}",
        payload=str(user_id)
    )

    if invoice.get("ok"):
        pay_url = invoice["result"]["pay_url"]
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url))
        builder.add(InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{invoice['result']['invoice_id']}"))
        builder.row(InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_deposit"))

        await callback.message.edit_text(
            t("deposit_pay", user.lang, amount=amount),
            reply_markup=builder.as_markup()
        )
    else:
        await callback.message.edit_text(t("deposit_error", user.lang))

@dp.callback_query(F.data == "back_to_deposit")
async def back_to_deposit_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üí≥ 1 TON", callback_data="deposit_1"))
    builder.add(InlineKeyboardButton(text="üí≥ 5 TON", callback_data="deposit_5"))
    builder.add(InlineKeyboardButton(text="üí≥ 10 TON", callback_data="deposit_10"))
    builder.row(InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_main"))
    if callback.message.text and t("check_payment_not_found", user.lang) in callback.message.text:
        await callback.message.answer(
            t("deposit_menu", user.lang),
            reply_markup=builder.as_markup()
        )
    else:
        await callback.message.edit_text(
            t("deposit_menu", user.lang),
            reply_markup=builder.as_markup()
        )

@dp.callback_query(F.data.startswith("check_"))
async def check_payment_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    invoice_id = callback.data.split("_")[1]
    invoice = await cryptopay.check_invoice(invoice_id)
    menu_markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{invoice_id}")],
        [InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_deposit")]
    ])

    if invoice.get("ok") and invoice.get("result"):
        invoice_data = invoice["result"][0]
        status = invoice_data.get("status")
        if status == "paid":
            user_id = int(invoice_data.get("payload", callback.from_user.id))
            amount = float(invoice_data.get("amount", 0))
            user = await db.get_user(user_id)
            user.balance += amount
            history = db.get_history(user)
            history.append({"type": "deposit", "amount": amount, "desc": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ CryptoBot ({amount} TON)"})
            db.set_history(user, history)
            await db.update_user(user)
            await callback.message.edit_text(
                t("check_payment_paid", user.lang, amount=amount),
                reply_markup=menu_markup
            )
        elif status == "active":
            await callback.message.edit_text(
                t("check_payment_active", user.lang),
                reply_markup=menu_markup
            )
        else:
            await callback.message.edit_text(
                t("check_payment_status", user.lang, status=status),
                reply_markup=menu_markup
            )
    else:
        await callback.message.answer_sticker("CAACAgIAAxkBAAEOi95oMFEAAcgO-YbH4g76A2cfNt3zXzUAAgIBAAJWnb0KTuJsgctA5P82BA")
        await callback.message.answer(
            t("check_payment_not_found", user.lang),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{invoice_id}")],
                [InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_deposit")]
            ])
        )

# –†–∞–∑–¥–µ–ª –≤—ã–≤–æ–¥–∞
@dp.callback_query(F.data == "withdraw")
async def withdraw_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    menu_markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_main")
    ]])
    if user.balance < 1:
        await callback.message.edit_text(t("withdraw_min", user.lang), reply_markup=menu_markup)
        return

    await callback.message.edit_text(
        t("withdraw_menu", user.lang, balance=user.balance),
        reply_markup=menu_markup
    )

@dp.message(F.text.regexp(r"^\d+(\.\d+)?$"))
async def process_withdrawal(message: types.Message):
    amount = float(message.text)
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    menu_markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_main")
    ]])

    if user.balance >= amount:
        success = await db.process_withdrawal(user_id, amount, cryptopay)
        if success:
            history = db.get_history(user)
            history.append({"type": "withdraw", "amount": amount, "desc": f"–í—ã–≤–æ–¥ –≤ CryptoBot ({amount} TON)"})
            db.set_history(user, history)
            await db.update_user(user)
            await message.answer(t("withdraw_success", user.lang, amount=amount), reply_markup=menu_markup)
        else:
            await message.answer(t("withdraw_error", user.lang), reply_markup=menu_markup)
    else:
        await message.answer(t("withdraw_not_enough", user.lang), reply_markup=menu_markup)

# –†–∞–∑–¥–µ–ª –∞–∫—Ü–∏–π
@dp.callback_query(F.data == "promo")
async def promo_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    await callback.message.edit_text(
        t("promo_text", user.lang),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[ 
            InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_main")
        ]])
    )

# –†–∞–∑–¥–µ–ª –ø—Ä–∞–≤–∏–ª
@dp.callback_query(F.data == "rules")
async def rules_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    await callback.message.edit_text(
        t("rules_text", user.lang),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[ 
            InlineKeyboardButton(text=t("back", user.lang), callback_data="back_to_main")
        ]])
    )

# –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
@dp.callback_query(F.data == "referral")
async def referral_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    referrals = db.get_referrals(user)
    total_referrals = len(referrals)
    active_referrals = []
    for rid in referrals:
        ref_user = await db.get_user(rid)
        if getattr(ref_user, "ref_purchases", 0) > 0:
            active_referrals.append(rid)
    total_active = len(active_referrals)
    earned = round(getattr(user, "earned", 0.0), 2)
    last_active = active_referrals[-3:]
    total_purchases = 0
    for rid in referrals:
        ref_user = await db.get_user(rid)
        total_purchases += getattr(ref_user, "ref_purchases", 0)
    lang = user.lang
    ref_link = f"https://t.me/{(await bot.get_me()).username}?start=ref_{user_id}"
    text = t("referral_menu", lang, ref_link=ref_link, total_referrals=total_referrals, total_active=total_active, earned=earned, total_purchases=total_purchases)
    if last_active:
        text += t("referral_last_active", lang)
        for rid in last_active:
            text += f"- {rid}\n"
    text += t("referral_bonus_info", lang)
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text=t("back", lang), callback_data="back_to_main")
        ]])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è 10 TON (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@dp.callback_query(F.data == "add10")
async def add10_handler(callback: types.CallbackQuery):
    if callback.from_user.id == ADMIN_ID:
        user = await db.get_user(callback.from_user.id)
        user.balance += 10
        await db.update_user(user)
        await callback.message.edit_text(
            "‚úÖ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 TON!",
            reply_markup=main_menu(callback.from_user.id, lang=user.lang)
        )
    else:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

# –î–æ–±–∞–≤–ª—è—é –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è lottery_back_to_main
@dp.callback_query(F.data == "lottery_back_to_main")
async def lottery_back_to_main_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    await callback.message.answer(
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–æ—Ç!\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã!",
        reply_markup=main_menu(callback.from_user.id, lang=user.lang)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query(F.data == "test_deposit")
async def test_deposit_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    user.balance += 1  # –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ 1 TON
    history = db.get_history(user)
    history.append({"type": "test_deposit", "amount": 1, "desc": "–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–≥)"})
    db.set_history(user, history)
    await db.update_user(user)
    await callback.message.edit_text(
        t("test_deposit_success", user.lang),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text=t("main_menu", user.lang), callback_data="back_to_main")
        ]])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.callback_query(F.data.in_(["lang_ru", "lang_en"]))
async def set_language(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    lang = "ru" if callback.data == "lang_ru" else "en"
    user.lang = lang
    await db.update_user(user)
    await callback.message.edit_text(
        t("start", lang, balance=user.balance),
        reply_markup=main_menu(callback.from_user.id, lang=lang)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
@dp.callback_query(F.data == "change_lang")
async def change_lang_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text=t("button_ru", user.lang), callback_data="lang_ru"),
        InlineKeyboardButton(text=t("button_en", user.lang), callback_data="lang_en")
    )
    await callback.message.edit_text(
        t("choose_language", user.lang),
        reply_markup=builder.as_markup()
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await db.init()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
