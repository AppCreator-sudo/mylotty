import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from uuid import uuid4
from typing import Dict, Optional
from cryptopay import CryptoPay
import random
from db import AsyncDatabase
import os
from dotenv import load_dotenv

load_dotenv()
db = AsyncDatabase(os.getenv("DATABASE_URL"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv('API_TOKEN')
CRYPTOPAY_TOKEN = os.getenv('CRYPTOPAY_TOKEN')

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CryptoPay
cryptopay = CryptoPay(token=CRYPTOPAY_TOKEN)

ADMIN_ID = int(os.getenv('ADMIN_ID'))  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram user_id

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(user_id=None):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="ü¶ã –ò–≥—Ä–∞—Ç—å", callback_data="play"),
        InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")
    )
    builder.row(
        InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"),
        InlineKeyboardButton(text="üì§ –í—ã–≤–æ–¥", callback_data="withdraw")
    )
    builder.row(
        InlineKeyboardButton(text="üéÅ –ê–∫—Ü–∏–∏", callback_data="promo"),
        InlineKeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules")
    )
    builder.row(
        InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referral")
    )
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è 10 TON —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
    if user_id == ADMIN_ID:
        builder.row(InlineKeyboardButton(text="üí∏ –ù–∞—á–∏—Å–ª–∏—Ç—å 10 TON", callback_data="add10"))
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(CommandStart())
async def start_command(message: types.Message, command: CommandObject):
    user = await db.get_user(message.from_user.id)
    ref_id = None
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç ref_
    if command.args and command.args.startswith("ref_"):
        ref_id = int(command.args.split("_")[1])
        if ref_id != message.from_user.id:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
            if not getattr(user, "invited_by", None):
                user.invited_by = ref_id
                await db.update_user(user)
            ref_user = await db.get_user(ref_id)
            referrals = db.get_referrals(ref_user)
            if message.from_user.id not in referrals:
                referrals.append(message.from_user.id)
                db.set_referrals(ref_user, referrals)
                await db.update_user(ref_user)
    await message.answer(
        f"üéâ \U0001F98B –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance:.2f} TON",
        reply_markup=main_menu(message.from_user.id)
    )

# –†–∞–∑–¥–µ–ª –∏–≥—Ä—ã ‚Äî —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
@dp.callback_query(F.data == "play")
async def play_handler(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)", callback_data="agree_lottery"))
    builder.add(InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    await callback.message.edit_text(
        "üé∞ –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã –≤—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å —Ç–µ–º, —á—Ç–æ –≤—ã–∏–≥—Ä—ã—à–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∏ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã.\n\n"
        "–ù–∞–∂–∏–º–∞—è '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å —ç—Ç–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏.",
        reply_markup=builder.as_markup()
    )

# –ü–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–∏—è ‚Äî –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∏–ª–µ—Ç–æ–≤
@dp.callback_query(F.data == "agree_lottery")
async def agree_lottery_handler(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="1 –±–∏–ª–µ—Ç ‚Äî 1 TON", callback_data="buy_1"))
    builder.row(InlineKeyboardButton(text="3 –±–∏–ª–µ—Ç–∞ ‚Äî 2.9 TON", callback_data="buy_3"))
    builder.row(InlineKeyboardButton(text="10 –±–∏–ª–µ—Ç–æ–≤ ‚Äî 9 TON", callback_data="buy_10"))
    builder.row(InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="back_to_play"))
    await callback.message.edit_text(
        "üéüÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "back_to_play")
async def back_to_play_handler(callback: types.CallbackQuery):
    # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–æ–≥–ª–∞—Å–∏—é —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)", callback_data="agree_lottery"))
    builder.add(InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    await callback.message.edit_text(
        "üé∞ –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã –≤—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å —Ç–µ–º, —á—Ç–æ –≤—ã–∏–≥—Ä—ã—à–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∏ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã.\n\n"
        "–ù–∞–∂–∏–º–∞—è '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å —ç—Ç–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏.",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "back_to_main")
async def back_to_main_handler(callback: types.CallbackQuery):
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç '‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.', –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if callback.message.text and "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞." in callback.message.text:
        await callback.message.answer(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–æ—Ç!\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã!",
            reply_markup=main_menu(callback.from_user.id)
        )
        return
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ —Å—Ç–∏–∫–µ—Ä–∞ –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º), –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not callback.message.text:
        await callback.message.answer(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–æ—Ç!\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã!",
            reply_markup=main_menu(callback.from_user.id)
        )
        return
    try:
        await callback.message.edit_text(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–æ—Ç!\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã!",
            reply_markup=main_menu(callback.from_user.id)
        )
    except Exception:
        await callback.message.answer(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–æ—Ç!\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã!",
            reply_markup=main_menu(callback.from_user.id)
        )

# –ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –∏ —Ä–æ–∑—ã–≥—Ä—ã—à
@dp.callback_query(F.data.in_(["buy_1", "buy_3", "buy_10"]))
async def buy_tickets_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    ticket_map = {
        "buy_1": (1, 1.0),
        "buy_3": (3, 2.9),
        "buy_10": (10, 9.0)
    }
    tickets, price = ticket_map[callback.data]
    if user.balance < price:
        await callback.message.edit_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {tickets} –±–∏–ª–µ—Ç–æ–≤.\n–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance:.2f} TON",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="back_to_main")
            ]])
        )
        return
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    user.balance -= price
    # –£—á—ë—Ç –ø–æ–∫—É–ø–æ–∫ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    user.ref_purchases = getattr(user, "ref_purchases", 0) + 1
    await db.update_user(user)
    # –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
    history = db.get_history(user)
    history.append({
        "type": "game",
        "amount": -price,
        "desc": f"–ü–æ–∫—É–ø–∫–∞ {tickets} –±–∏–ª–µ—Ç(–æ–≤) –Ω–∞ {price} TON"
    })
    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å (15% –æ—Ç –ø–æ–∫—É–ø–∫–∏)
    if getattr(user, "invited_by", None):
        ref_user = await db.get_user(user.invited_by)
        bonus = round(price * 0.15, 2)
        ref_user.balance += bonus
        ref_user.earned = getattr(ref_user, "earned", 0.0) + bonus
        ref_history = db.get_history(ref_user)
        ref_history.append({
            "type": "referral_bonus",
            "amount": bonus,
            "desc": f"–ë–æ–Ω—É—Å –∑–∞ –ø–æ–∫—É–ø–∫—É –±–∏–ª–µ—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º {user.user_id}"
        })
        db.set_history(ref_user, ref_history)
        await db.update_user(ref_user)
    # –í—ã–∏–≥—Ä—ã—à: —Å–ª—É—á–∞–π–Ω–æ –æ—Ç 10% –¥–æ 50% –æ—Ç —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏
    win_percent = random.uniform(0.1, 0.5)
    win_amount = round(price * win_percent, 2)
    if win_amount > 0:
        user.balance += win_amount
        history.append({
            "type": "win",
            "amount": win_amount,
            "desc": f"–í—ã–∏–≥—Ä—ã—à –≤ –ª–æ—Ç–µ—Ä–µ–µ: {win_amount} TON"
        })
        db.set_history(user, history)
        await db.update_user(user)
        # –°—Ç–∏–∫–µ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        await callback.message.answer_sticker("CAACAgIAAxkBAAEOhK9oKl600GvZPoV6OROtfhAJOr1glAACAwEAAladvQoC5dF4h-X6TzYE")
        await callback.message.answer(
            f"üéâ –í—ã –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ –ª–æ—Ç–µ—Ä–µ–µ –∏ –∫—É–ø–∏–ª–∏ {tickets} –±–∏–ª–µ—Ç(–æ–≤)!\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞: –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!\n"
            f"–°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞: {win_amount} TON\n"
            f"–ë–∞–ª–∞–Ω—Å: {user.balance:.2f} TON",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="lottery_back_to_main")
            ]])
        )
    else:
        db.set_history(user, history)
        await db.update_user(user)
        await callback.message.edit_text(
            f"üéâ –í—ã –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ –ª–æ—Ç–µ—Ä–µ–µ –∏ –∫—É–ø–∏–ª–∏ {tickets} –±–∏–ª–µ—Ç(–æ–≤)!\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞: –í—ã –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏.\n"
            f"–°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞: {win_amount} TON\n"
            f"–ë–∞–ª–∞–Ω—Å: {user.balance:.2f} TON",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="back_to_main")
            ]])
        )

# –†–∞–∑–¥–µ–ª –±–∞–ª–∞–Ω—Å–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
@dp.callback_query(F.data == "balance")
async def balance_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    history = db.get_history(user)
    history_text = "\n\n<b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:</b>\n"
    if history:
        for h in history[-10:][::-1]:
            desc = h.get("desc") if isinstance(h, dict) else str(h)
            amount = h.get("amount") if isinstance(h, dict) else ""
            if amount != "":
                history_text += f"‚Ä¢ {desc} ({amount} TON)\n"
            else:
                history_text += f"‚Ä¢ {desc}\n"
    else:
        history_text += "–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π."
    await callback.message.edit_text(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance:.2f} TON\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: {user.balance:.2f} TON"
        f"{history_text}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]])
    )

# –†–∞–∑–¥–µ–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query(F.data == "deposit")
async def deposit_handler(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üí≥ 1 TON", callback_data="deposit_1"))
    builder.add(InlineKeyboardButton(text="üí≥ 5 TON", callback_data="deposit_5"))
    builder.add(InlineKeyboardButton(text="üí≥ 10 TON", callback_data="deposit_10"))
    # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    builder.add(InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="test_deposit"))
    builder.row(InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    await callback.message.edit_text(
        "üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data.startswith("deposit_"))
async def deposit_amount_handler(callback: types.CallbackQuery):
    amount = float(callback.data.split("_")[1])
    user_id = callback.from_user.id

    invoice = await cryptopay.create_invoice(
        amount=amount,
        description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {user_id}",
        payload=str(user_id)
    )

    if invoice.get("ok"):
        pay_url = invoice["result"]["pay_url"]
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url))
        builder.add(InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{invoice['result']['invoice_id']}"))
        builder.row(InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="back_to_deposit"))

        await callback.message.edit_text(
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã {amount} TON:\n\n"
            f"–°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 1 —á–∞—Å.",
            reply_markup=builder.as_markup()
        )
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data == "back_to_deposit")
async def back_to_deposit_handler(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üí≥ 1 TON", callback_data="deposit_1"))
    builder.add(InlineKeyboardButton(text="üí≥ 5 TON", callback_data="deposit_5"))
    builder.add(InlineKeyboardButton(text="üí≥ 10 TON", callback_data="deposit_10"))
    builder.row(InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
    if callback.message.text and "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞." in callback.message.text:
        await callback.message.answer(
            "üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É:",
            reply_markup=builder.as_markup()
        )
    else:
        await callback.message.edit_text(
            "üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É:",
            reply_markup=builder.as_markup()
        )

@dp.callback_query(F.data.startswith("check_"))
async def check_payment_handler(callback: types.CallbackQuery):
    invoice_id = callback.data.split("_")[1]
    invoice = await cryptopay.check_invoice(invoice_id)
    menu_markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{invoice_id}")],
        [InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="back_to_deposit")]
    ])

    if invoice.get("ok") and invoice.get("result"):
        invoice_data = invoice["result"][0]
        status = invoice_data.get("status")
        if status == "paid":
            user_id = int(invoice_data.get("payload", callback.from_user.id))
            amount = float(invoice_data.get("amount", 0))
            user = await db.get_user(user_id)
            user.balance += amount
            history = db.get_history(user)
            history.append({
                "type": "deposit",
                "amount": amount,
                "desc": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ CryptoBot ({amount} TON)"
            })
            db.set_history(user, history)
            await db.update_user(user)
            await callback.message.edit_text(
                f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} TON!",
                reply_markup=menu_markup
            )
        elif status == "active":
            await callback.message.edit_text(
                "‚è≥ –û–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=menu_markup
            )
        else:
            await callback.message.edit_text(
                f"‚ùå –°—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞: {status}",
                reply_markup=menu_markup
            )
    else:
        await callback.message.answer_sticker("CAACAgIAAxkBAAEOi95oMFEAAcgO-YbH4g76A2cfNt3zXzUAAgIBAAJWnb0KTuJsgctA5P82BA")
        await callback.message.answer(
            "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{invoice_id}")],
                [InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="back_to_deposit")]
            ])
        )

# –†–∞–∑–¥–µ–ª –≤—ã–≤–æ–¥–∞
@dp.callback_query(F.data == "withdraw")
async def withdraw_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    menu_markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="back_to_main")
    ]])
    if user.balance < 1:
        await callback.message.edit_text("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 1 TON", reply_markup=menu_markup)
        return

    await callback.message.edit_text(
        "üì§ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ: {user.balance:.2f} TON\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>1.5</code>):\n\n"
        "<b>–ü–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –≤—ã–≤–æ–¥–æ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ @CryptoBot, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª—ë–∫!</b>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]])
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—É–º–º–æ–π –¥–ª—è –≤—ã–≤–æ–¥–∞
@dp.message(F.text.regexp(r"^\d+(\.\d+)?$"))
async def process_withdrawal(message: types.Message):
    amount = float(message.text)
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    menu_markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="back_to_main")
    ]])

    if user.balance >= amount:
        success = await db.process_withdrawal(user_id, amount, cryptopay)
        if success:
            history = db.get_history(user)
            history.append({
                "type": "withdraw",
                "amount": amount,
                "desc": f"–í—ã–≤–æ–¥ –≤ CryptoBot ({amount} TON)"
            })
            db.set_history(user, history)
            await db.update_user(user)
            await message.answer(f"‚úÖ {amount} TON –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à CryptoBot-–∫–æ—à–µ–ª—ë–∫!", reply_markup=menu_markup)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–ª–∏ @CryptoBot –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=menu_markup)
    else:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.", reply_markup=menu_markup)

# –†–∞–∑–¥–µ–ª –∞–∫—Ü–∏–π
@dp.callback_query(F.data == "promo")
async def promo_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üéÅ –ê–∫—Ü–∏–∏ –∏ –±–æ–Ω—É—Å—ã\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]])
    )

# –†–∞–∑–¥–µ–ª –ø—Ä–∞–≤–∏–ª
@dp.callback_query(F.data == "rules")
async def rules_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üìú –ü—Ä–∞–≤–∏–ª–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "1. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 1 TON\n"
        "2. –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n"
        "3. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–æ–≤\n\n"
        "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @support",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]])
    )

# –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
@dp.callback_query(F.data == "referral")
async def referral_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    referrals = db.get_referrals(user)
    total_referrals = len(referrals)
    active_referrals = []
    for rid in referrals:
        ref_user = await db.get_user(rid)
        if getattr(ref_user, "ref_purchases", 0) > 0:
            active_referrals.append(rid)
    total_active = len(active_referrals)
    earned = round(getattr(user, "earned", 0.0), 2)
    last_active = active_referrals[-3:]
    total_purchases = 0
    for rid in referrals:
        ref_user = await db.get_user(rid)
        total_purchases += getattr(ref_user, "ref_purchases", 0)
    text = (
        "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n"
        f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\nhttps://t.me/{(await bot.get_me()).username}?start=ref_{user_id}\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {total_referrals} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {total_active})\n"
        f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {earned} TON\n"
        f"–ü–æ–∫—É–ø–æ–∫ –±–∏–ª–µ—Ç–æ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏: {total_purchases}\n"
    )
    if last_active:
        text += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã (user_id):\n"
        for rid in last_active:
            text += f"- {rid}\n"
    text += "\n–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 15% –æ—Ç –≤—Å–µ—Ö –ø–æ–∫—É–ø–æ–∫ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!"
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è 10 TON (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@dp.callback_query(F.data == "add10")
async def add10_handler(callback: types.CallbackQuery):
    if callback.from_user.id == ADMIN_ID:
        user = await db.get_user(callback.from_user.id)
        user.balance += 10
        await db.update_user(user)
        await callback.message.edit_text(
            "‚úÖ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 TON!",
            reply_markup=main_menu(callback.from_user.id)
        )
    else:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

# –î–æ–±–∞–≤–ª—è—é –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è lottery_back_to_main
@dp.callback_query(F.data == "lottery_back_to_main")
async def lottery_back_to_main_handler(callback: types.CallbackQuery):
    await callback.message.answer(
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–æ—Ç!\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã!",
        reply_markup=main_menu(callback.from_user.id)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query(F.data == "test_deposit")
async def test_deposit_handler(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    user.balance += 1  # –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ 1 TON
    history = db.get_history(user)
    history.append({
        "type": "test_deposit",
        "amount": 1,
        "desc": "–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–≥)"
    })
    db.set_history(user, history)
    await db.update_user(user)
    await callback.message.edit_text(
        "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω 1 TON.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="back_to_main")
        ]])
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await db.init()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
